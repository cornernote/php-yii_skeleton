<?php

/**
 *
 * @package app.controller
 * @author Brett O'Donnell <brett@mrphp.com.au>
 */
class ToolController extends WebController
{

    /**
     * Specifies the access control rules.
     * This method is used by the 'accessControl' filter.
     * @return array access control rules
     */
    public function accessRules()
    {
        return array(
            array('allow',
                'actions' => array('index', 'page', 'clearCache', 'generateProperties', 'generateRules'),
                'roles' => array('dev', 'admin'),
            ),
            array('deny',
                'users' => array('*'),
            ),
        );
    }

    /**
     * @return array
     */
    public function actions()
    {
        return array(
            'page' => array(
                'class' => 'CViewAction',
            ),
        );
    }

    public function actionIndex()
    {
        $this->render('index');
    }

    /**
     *
     */
    public function actionClearCache()
    {
        cache()->flush();
        user()->addFlash('Server cache has been cleared.', 'success');
        $this->redirect(ReturnUrl::getUrl());
    }

    /**
     *
     */
    public function actionGenerateProperties()
    {
        $modelName = sf('modelName');
        //just to make an easier to change bookmark
        if (in_array($modelName, array('list_all', 'listall'))) {
            $modelName = false;
        }
        if (!$modelName) {
            $pathList = CFileHelper::findFiles(Yii::getPathOfAlias("application.models"), array(
                    'fileTypes' => array('php'),
                )
            );
            //            array_walk($fileList,'basename');
            $linkList = array();
            foreach ($pathList as $path) {
                $modelName = basename($path, '.php');
                @$model = new $modelName;
                if ($model && is_subclass_of($model, 'CActiveRecord')) {
                    $link = l($modelName, array('tool/generateProperties', 'modelName' => $modelName));
                    $linkList [] = $link;
                }
            }
            echo implode("<br/>\r\n", $linkList);
            return;
        }
        $model = CActiveRecord::model($modelName);
        if (!$model) {
            echo "<br/> model not found [$modelName]<br/>";
            return;
        }

        $fileName = dirname(__FILE__) . '/../models/' . $modelName . '.php';
        $buffer = false;
        $firstLine = " * --- BEGIN AutoGenerated by tool/generateProperties ---";
        $lastLine = " * --- END AutoGenerated by tool/generateProperties ---";
        $oldDoc = $fileContents = '';
        if (file_exists($fileName)) {
            $fileContents = file_get_contents($fileName);
            $firstPos = strpos($fileContents, $firstLine);
            $lastPos = strpos($fileContents, $lastLine);
            if ($firstPos && $lastPos && ($lastPos > $firstPos)) {
                $buffer = true;
                $oldDoc = StringHelper::getBetweenString($fileContents, $firstLine, $lastLine, false, false);
                ob_start();
            }
        }

        //        echo "<br/> $fileName <br/>\r\n";
        //        die;

        // table
        $tableName = $model->tableName();
        echo $firstLine . "<br/>";
        echo " *<br/>";
        echo " * This is the model class for table '$tableName'<br/>";
        echo " *<br/>";
        echo " * @method $modelName with() with()<br/>";
        echo " * @method $modelName find() find(\$condition, array \$params = array())<br/>";
        echo " * @method {$modelName}[] findAll() findAll(\$condition = '', array \$params = array())<br/>";
        echo " * @method $modelName findByPk() findByPk(\$pk, \$condition = '', array \$params = array())<br/>";
        echo " * @method {$modelName}[] findAllByPk() findAllByPk(\$pk, \$condition = '', array \$params = array())<br/>";
        echo " * @method $modelName findByAttributes() findByAttributes(array \$attributes, \$condition = '', array \$params = array())<br/>";
        echo " * @method {$modelName}[] findAllByAttributes() findAllByAttributes(array \$attributes, \$condition = '', array \$params = array())<br/>";
        echo " * @method $modelName findBySql() findBySql(\$sql, array \$params = array())<br/>";
        echo " * @method {$modelName}[] findAllBySql() findAllBySql(\$sql, array \$params = array())<br/>";
        echo " *<br/>";


        // behaviors
        $behaviors = $model->behaviors();
        $inheritedMethods = array();
        foreach (get_class_methods('CActiveRecordBehavior') as $methodName) {
            $inheritedMethods[$methodName] = $methodName;
        }
        $selfMethods = array();
        foreach (get_class_methods($modelName) as $methodName) {
            $selfMethods[$methodName] = $methodName;
        }
        foreach ($behaviors as $behavior) {
            $className = $behavior;
            if (is_array($behavior)) {
                $className = $behavior['class'];
            }
            $className = explode('.', $className);
            $className = $className[count($className) - 1];
            $methods = get_class_methods($className);
            $header = false;
            foreach ($methods as $methodName) {
                if (isset($inheritedMethods[$methodName]) || isset($selfMethods[$methodName])) {
                    continue;
                }
                if (!$header) {
                    echo " * Methods from behavior " . $className . '<br/>';
                    $header = true;
                }


                $methodReturn = StringHelper::getTypeFromDocComment($className, $methodName, 'return');
                $paramTypes = StringHelper::getDocComment($className, $methodName, 'param');
                $methodReturn = $methodReturn ? current($methodReturn) . ' ' : '';
                echo " * @method $methodReturn$methodName() $methodName(";
                $r = new ReflectionMethod($className, $methodName);
                $params = $r->getParameters();
                $separator = '';
                foreach ($params as $param) {
                    //$param is an instance of ReflectionParameter
                    /* @var $param ReflectionParameter */
                    $type = current($paramTypes);
                    $filterType = '';
                    if ($type && strpos($type, '$')) {
                        $typeString = StringHelper::getBetweenString($type, false, '$');
                        $typeString = trim($typeString);
                        $filterType = StringHelper::filterDocType($typeString);
                        $filterType = $filterType ? trim($filterType) . ' ' : '';
                    }
                    next($paramTypes);
                    echo $separator . $filterType . '$' . $param->getName();
                    if ($param->isOptional()) {
                        echo ' = ';
                        var_export($param->getDefaultValue());
                    }
                    $separator = ', ';
                }
                echo ")<br/>";

            }
            echo ' *<br/>';
        }

        // relations
        $relations = $model->relations();
        if ($relations) {
            echo ' * Properties from relation<br/>';
            foreach ($relations as $relationName => $relation) {
                if (in_array($relation[0], array('CBelongsToRelation', 'CHasOneRelation'))) {
                    echo ' * @property ' . $relation[1] . ' $' . $relationName . "<br/>\n";
                }
                elseif (in_array($relation[0], array('CHasManyRelation', 'CManyManyRelation'))) {
                    echo ' * @property ' . $relation[1] . '[] $' . $relationName . "<br/>\n";
                }
                elseif (in_array($relation[0], array('CStatRelation'))) {
                    echo ' * @property integer $' . $relationName . "<br/>\n";
                }
                else {
                    echo ' * @property unknown $' . $relationName . "<br/>\n";
                }

            }
            echo ' *<br/>';
        }
        echo ' * Properties from table fields<br/>';

        // table fields
        $table = $model->getDbConnection()->getSchema()->getTable($tableName, true);
        if ($table) {
            foreach ($table->columns as $column) {
                $type = $column->type;
                if (($column->dbType == 'datetime') || ($column->dbType == 'date')) {
                    $type = $column->dbType;
                }
                if (strpos($column->dbType, 'decimal') !== false) {
                    $type = 'number';
                }
                echo ' * @property ' . $type . ' $' . $column->name . "<br/>\n";
            }
        }

        echo ' *<br/>';
        echo $lastLine;

        if ($buffer) {
            $contents = ob_get_contents();
            $contents = str_replace("\n", "", $contents);
            $contents = str_replace('<br/>', "\n", $contents);
            if ($oldDoc && ($contents != $oldDoc)) {
                $newFileContents = str_replace($oldDoc, $contents, $fileContents);
                file_put_contents($fileName, $newFileContents);
                echo "<br/>**  overwrited $fileName<br/>\r\n";
            }
        }
    }

    /**
     * @return mixed
     */
    public function actionGenerateRules()
    {
        $modelName = sf('modelName');
        if (!$modelName) {
            echo "<br> add a get attribute <b>modelName</b>=SomeModel to request url<br>";
            return;
        }
        $model = CActiveRecord::model($modelName);
        if (!$model) {
            echo "<br> model not found [$modelName]<br>";
            return;
        }

        $rules = array();
        $required = array();
        $integers = array();
        $numerical = array();
        $length = array();
        $safe = array();
        $search = array();
        $tableName = $model->tableName();
        $table = $model->getDbConnection()->getSchema()->getTable($tableName, true);
        foreach ($table->columns as $column) {
            if ($column->autoIncrement)
                continue;
            $search[] = $column->name;
            $r = !$column->allowNull && $column->defaultValue === null;
            if ($r)
                $required[] = $column->name;
            if ($column->type === 'integer')
                $integers[] = $column->name;
            else if ($column->type === 'double')
                $numerical[] = $column->name;
            else if ($column->type === 'string' && $column->size > 0)
                $length[$column->size][] = $column->name;
            else if (!$column->isPrimaryKey && !$r)
                $safe[] = $column->name;
        }
        if ($required !== array())
            $rules[] = "array('" . implode(', ', $required) . "', 'required')";
        if ($integers !== array())
            $rules[] = "array('" . implode(', ', $integers) . "', 'numerical', 'integerOnly'=>true)";
        if ($numerical !== array())
            $rules[] = "array('" . implode(', ', $numerical) . "', 'numerical')";
        if ($length !== array()) {
            foreach ($length as $len => $cols)
                $rules[] = "array('" . implode(', ', $cols) . "', 'length', 'max'=>$len)";
        }
        if ($safe !== array())
            $rules[] = "array('" . implode(', ', $safe) . "', 'safe')";

        echo '$rules = array();<br/>' . "\n";
        echo 'if ($this->scenario == \'search\') {' . "<br/>\n";
        echo "\t" . "\$rules[] = array('" . implode(', ', $search) . "', 'safe');" . "<br/>\n";
        echo '}' . "<br/>\n";
        echo 'if (in_array($this->scenario, array(\'create\', \'update\'))) {' . "<br/>\n";
        foreach ($rules as $rule) {
            echo "\t" . '$rules[] = ' . $rule . ';' . "<br/>\n";
        }
        echo '}' . "<br/>\n";
        echo 'return $rules;' . "<br/>\n";

    }

}

