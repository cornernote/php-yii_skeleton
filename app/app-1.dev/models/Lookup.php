<?php
/**
 * --- BEGIN AutoGenerated by tool/generateProperties ---
 *
 * you need to goto the following page in a browser:
 * /tool/generateProperties/modelName/Lookup
 *
 * --- END AutoGenerated by tool/generateProperties ---
 */

class Lookup extends ActiveRecord
{

    /**
     * @var array
     */
    private static $_items = array();

    /**
     * Returns the static model of the specified AR class.
     * @param string $className active record class name.
     * @return Lookup the static model class
     */
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    /**
     * @return string the associated database table name
     */
    public function tableName()
    {
        return 'lookup';
    }

    /**
     * @return array validation rules for model attributes.
     */
    public function rules()
    {
        $rules = array();
        $rules[] = array('name, type, position, created', 'required');
        $rules[] = array('position', 'numerical', 'integerOnly' => true);
        $rules[] = array('name, type', 'length', 'max' => 128);
        $rules[] = array('deleted', 'safe');
        return $rules;
    }

    /**
     * @return array containing model behaviours
     */
    public function behaviors()
    {
        return array(
            'AuditBehavior' => 'AuditBehavior',
            'CTimestampBehavior' => array(
                'class' => 'zii.behaviors.CTimestampBehavior',
                'createAttribute' => 'created',
                'updateAttribute' => null,
            ),
            'SoftDeleteBehavior' => 'SoftDeleteBehavior',
        );
    }

    /**
     * @return array relational rules.
     */
    public function relations()
    {
        return array();
    }

    /**
     * @return array customized attribute labels (name=>label)
     */
    public function attributeLabels()
    {
        return array(
            'id' => t('ID'),
            'name' => t('Name'),
            'type' => t('Type'),
            'position' => t('Position'),
            'created' => t('Created'),
            'deleted' => t('Deleted'),
        );
    }

    /**
     * Retrieves a list of models based on the current search/filter conditions.
     * @param array $options
     * @return CActiveDataProvider the data provider that can return the models based on the search/filter conditions.
     */
    public function search($options = array())
    {
        // Warning: Please modify the following code to remove attributes that
        // should not be searched.

        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('name', $this->name, true);
        $criteria->compare('type', $this->type, true);
        $criteria->compare('position', $this->position);
        $criteria->compare('created', $this->created, true);
        $criteria->compare('deleted', $this->deleted, true);

        return new ActiveDataProvider($this, CMap::mergeArray(array(
            'criteria' => $criteria,
        ), $options));
    }

    /**
     * Retrieves a list of links to be used in grid and menus.
     * @param bool $extra
     * @return array
     */
    public function getDropdownLinkItems($extra = false)
    {
        $links = array();
        $links[] = array('label' => t('Update'), 'url' => $this->getUrl('update'));
        if ($extra) {
            $links[] = array(
                'label' => t('More'),
                'items' => array(
                    array('label' => t('Log'), 'url' => $this->getUrl('log')),
                    array('label' => t('Delete'), 'url' => $this->getUrl('delete'), 'linkOptions' => array('data-toggle' => 'modal-remote')),
                ),
            );
        }
        return $links;
    }

    /**
     * @static
     * @param $type
     * @return array
     */
    public static function items($type)
    {
        if (!isset(self::$_items[$type]))
            self::loadItems($type);
        return self::$_items[$type];
    }

    /**
     * @static
     * @param $type
     * @param $code
     * @return mixed
     */
    public static function item($type, $code)
    {
        if (!isset(self::$_items[$type]))
            self::loadItems($type);
        if (!isset(self::$_items[$type][$code])) {
            self::$_items[$type][$code] = null;
        }
        return self::$_items[$type][$code];
    }

}

